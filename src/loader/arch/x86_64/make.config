LOADER_NAME := loader
LOADER_ARCH_DIR := $(SRC_DIR)/$(LOADER_NAME)/arch/$(ARCH)

GNU_EFI_PATH := vendor/gnu-efi
GNU_EFI_LINKS := $(GNU_EFI_PATH)/x86_64/lib/libefi.a $(GNU_EFI_PATH)/x86_64/gnuefi/libgnuefi.a
#$(GNU_EFI_PATH)/x86_64/gnuefi/crt0-efi-x86_64.o  
LOADER_SYSROOT_NAME := sysroot

LOADER_INCL_DIRS := $(LOADER_ARCH_DIR)/headers $(GNU_EFI_PATH)/inc
LOADER_INCL_STMT := $(foreach path, $(LOADER_INCL_DIRS), -I$(path))

EFI_C_FLAGS := -ffreestanding -fshort-wchar -mno-red-zone $(LOADER_INCL_STMT)
EFI_CPP_FLAGS := -fno-exceptions -fno-rtti $(EFI_C_FLAGS)
EFI_LD_FLAGS := -nostdlib -Wl,-dll -shared -Wl,--subsystem,10 -e efi_main

LOADER_CPP_SRC_FILES := $(shell find $(LOADER_ARCH_DIR) -name "*.cpp")
_LOADER_CPP_OBJ := $(LOADER_CPP_SRC_FILES:.cpp=.o)
LOADER_CPP_OBJ := $(shell echo " $(_LOADER_CPP_OBJ)" | sed "s| $(SRC_DIR)| $(BUILD_DIR)|g")

LOADER_C_SRC_FILES := $(shell find $(LOADER_ARCH_DIR) -name "*.c")
_LOADER_C_OBJ := $(LOADER_C_SRC_FILES:.c=.o)
LOADER_C_OBJ := $(shell echo " $(_LOADER_C_OBJ)" | sed "s| $(SRC_DIR)| $(BUILD_DIR)|g")

# compile: (flags before -o become CFLAGS in the Makefile)
#x86_64-w64-mingw32-gcc -ffreestanding -Ipath/to/gnu-efi/inc -Ipath/to/gnu-efi/inc/x86_64 -Ipath/to/gnu-efi/inc/protocol -c -o hello.o hello.c
#x86_64-w64-mingw32-gcc -ffreestanding -Ipath/to/gnu-efi/inc -Ipath/to/gnu-efi/inc/x86_64 -Ipath/to/gnu-efi/inc/protocol -c -o data.o path/to/gnu-efi/lib/data.c
# link: (flags before -o become LDFLAGS in the Makefile)
#x86_64-w64-mingw32-gcc -nostdlib -Wl,-dll -shared -Wl,--subsystem,10 -e efi_main -o BOOTX64.EFI hello.o data.o

#LOADER_C_SRC_FILES := $(shell find $(LOADER_ARCH_DIR) -name "*.c")
#_LOADER_C_OBJ := $(LOADER_C_SRC_FILES:.c=.o)
#LOADER_C_OBJ := $(shell echo " $(_LOADER_C_OBJ)" | sed "s| $(SRC_DIR)| $(BUILD_DIR)|g")

LOADER_OBJ := $(LOADER_CPP_OBJ) $(LOADER_C_OBJ)

.PHONY: run gnuefi

#$(BUILD_DIR)/%.efi.o: $(SRC_DIR)/%.efi.cpp
#	mkdir -p $(shell dirname $@)
#	clang++ $(EFI_CPP_FLAGS) -c $< -o $@

$(BUILD_DIR)/%.efi.o: $(SRC_DIR)/%.efi.c
	mkdir -p $(shell dirname $@)
	x86_64-w64-mingw32-gcc $(EFI_C_FLAGS) -c $< -o $@

$(BUILD_DIR)/$(LOADER_NAME).so: $(LOADER_OBJ)
	mkdir -p $(shell dirname $@)
	x86_64-w64-mingw32-gcc $(EFI_LD_FLAGS) $(GNU_EFI_LINKS) $^ -o $@

$(OUT_DIR)/$(LOADER_NAME): $(BUILD_DIR)/$(LOADER_NAME).so
	objcopy -j .text -j .sdata -j .data -j .dynamic -j .dynsym  -j .rel -j .rela -j .rel.* -j .rela.* -j .reloc --target efi-app-x86_64 --subsystem=10 $< $@

$(BUILD_DIR)/$(LOADER_SYSROOT_NAME): $(OUT_DIR)/$(LOADER_NAME)
	mkdir -p $@
	cp -r $(LOADER_ARCH_DIR)/$(LOADER_SYSROOT_NAME)/* $@
	mkdir -p $@/EFI/BOOT
	cp -r $< $@/EFI/BOOT/BOOTX64.EFI

$(BUILD_DIR)/$(PROJECT).img: $(BUILD_DIR)/$(LOADER_SYSROOT_NAME)
	# TODO: make these numbers better
	dd if=/dev/zero of=$@ bs=1k count=1440
	mformat -i $@ -f 1440 ::
	#mmd -i $@ ::/EFI
	#mmd -i $@ ::/EFI/BOOT
	mcopy -s $@ $< ::/

$(BUILD_DIR)/$(PROJECT).bin: $(BUILD_DIR)/$(PROJECT).img
	mkgpt -o $@ --image-size 4096 --part $< --type system

$(OUT_DIR)/$(PROJECT).bin: $(BUILD_DIR)/$(PROJECT).bin
	mv $< $@

run: $(OUT_DIR)/$(PROJECT).bin
	qemu-system-$(ARCH) -bios /usr/share/edk2-ovmf/x64/OVMF.fd -net none -hda $^
# use as phony to make the whole of gnu_efi build
gnuefi:
	make -C $(GNU_EFI_PATH) 1> /dev/null
